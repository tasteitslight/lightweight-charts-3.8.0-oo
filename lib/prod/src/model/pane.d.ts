import { IDestroyable } from '../helpers/idestroyable';
import { ISubscription } from '../helpers/isubscription';
import { DeepPartial } from '../helpers/strict-type-checks';
import { ChartModel, ChartOptions } from './chart-model';
import { Grid } from './grid';
import { IPriceDataSource } from './iprice-data-source';
import { PriceScale } from './price-scale';
import { TimeScale } from './time-scale';
export declare const DEFAULT_STRETCH_FACTOR = 1000;
export declare type PriceScalePosition = 'left' | 'right' | 'overlay';
export declare type PreferredPriceScalePosition = 'left' | 'right' | 'overlay';
export declare class Pane implements IDestroyable {
    private readonly _timeScale;
    private readonly _model;
    private readonly _grid;
    private _dataSources;
    private _overlaySourcesByScaleId;
    private _height;
    private _width;
    private _stretchFactor;
    private _cachedOrderedSources;
    private _destroyed;
    private _leftPriceScale;
    private _rightPriceScale;
    constructor(timeScale: TimeScale, model: ChartModel);
    applyScaleOptions(options: DeepPartial<ChartOptions>): void;
    priceScaleById(id: string): PriceScale | null;
    destroy(): void;
    stretchFactor(): number;
    setStretchFactor(factor: number): void;
    model(): ChartModel;
    width(): number;
    height(): number;
    setWidth(width: number): void;
    setHeight(height: number): void;
    dataSources(): readonly IPriceDataSource[];
    isOverlay(source: IPriceDataSource): boolean;
    addDataSource(source: IPriceDataSource, targetScaleId: string, zOrder?: number): void;
    removeDataSource(source: IPriceDataSource): void;
    priceScalePosition(priceScale: PriceScale): PriceScalePosition;
    leftPriceScale(): PriceScale;
    rightPriceScale(): PriceScale;
    startScalePrice(priceScale: PriceScale, x: number): void;
    scalePriceTo(priceScale: PriceScale, x: number): void;
    endScalePrice(priceScale: PriceScale): void;
    startScrollPrice(priceScale: PriceScale, x: number): void;
    scrollPriceTo(priceScale: PriceScale, x: number): void;
    endScrollPrice(priceScale: PriceScale): void;
    updateAllSources(): void;
    defaultPriceScale(): PriceScale;
    defaultVisiblePriceScale(): PriceScale | null;
    recalculatePriceScale(priceScale: PriceScale | null): void;
    resetPriceScale(priceScale: PriceScale): void;
    momentaryAutoScale(): void;
    recalculate(): void;
    orderedSources(): readonly IPriceDataSource[];
    onDestroyed(): ISubscription;
    grid(): Grid;
    private _recalculatePriceScaleImpl;
    private _getZOrderMinMax;
    private _insertDataSource;
    private _onPriceScaleModeChanged;
    private _createPriceScale;
}
